#!/usr/bin/env python
import os
import subprocess


# *** Settings.

VERSION = "0.6.1"
COMPATIBILITY_MINIMUM = "4.5"


# *** Generate version header.

print("Generating SDK version header...")

git_sha = "unknown"
try:
    cmd = ["git", "rev-parse", "--short", "HEAD"]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    git_sha = proc.communicate()[0].strip().decode("utf-8")
except:
    pass

version_header_content = """/* DO NOT EDIT - generated by SConstruct */
#ifndef SENTRY_GODOT_SDK_VERSION_GEN_H
#define SENTRY_GODOT_SDK_VERSION_GEN_H

#define SENTRY_GODOT_SDK_VERSION \"{version}+{git_sha}\"

#endif // SENTRY_GODOT_SDK_VERSION_GEN_H
""".format(version=VERSION, git_sha=git_sha)

if not os.path.exists("src/gen/"):
    os.mkdir("src/gen/")
with open("src/gen/sdk_version.gen.h", "w") as f:
    f.write(version_header_content)


# *** Build godot-cpp.

print("Reading godot-cpp build configuration...")
env = SConscript("modules/godot-cpp/SConstruct")

platform = env["platform"]
arch = env["arch"]

out_dir = f"project/addons/sentry/bin/{platform}"
if platform in ["windows", "linux"]:
    # Separate arch dirs to avoid crashpad handler filename conflicts.
    out_dir += "/" + arch
out_dir = Dir(out_dir)


# *** Build sentry-native.

if platform in ["linux", "macos", "windows"]:
    # Build sentry-native.
    env = SConscript("modules/SConstruct", exports=["env"])

    # Deploy crashpad handler to project directory.
    deploy_crashpad_handler = env.CopyCrashpadHandler(out_dir)
    Default(deploy_crashpad_handler)


# *** Build GDExtension library.

# Include relative to project source root.
env.Append(CPPPATH=["src/"])

# Source files to compile.
sources = Glob("src/*.cpp")
sources += Glob("src/editor/*.cpp")
sources += Glob("src/sentry/*.cpp")
sources += Glob("src/sentry/processing/*.cpp")
sources += Glob("src/sentry/util/*.cpp")

# Platform-specific sources.
if platform in ["linux", "windows", "macos"]:
    sources += Glob("src/sentry/native/*.cpp")
elif platform == "android":
    sources += Glob("src/sentry/android/*.cpp")

# Generate documentation data.
if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

build_type = "release" if env["target"] == "template_release" else "debug"

if platform == "macos":
    library = env.SharedLibrary(
        f"{out_dir}/libsentry.{platform}.{build_type}.framework/libsentry.{platform}.{build_type}",
        source=sources,
    )
else:
    shlib_suffix=env["SHLIBSUFFIX"]
    library = env.SharedLibrary(
        f"{out_dir}/libsentry.{platform}.{build_type}.{arch}{shlib_suffix}",
        source=sources,
    )

Default(library)


# *** Deploy extension manifest.

manifest = env.Substfile(
    target="project/addons/sentry/sentry.gdextension",
    source="src/manifest.gdextension",
    SUBST_DICT={
        "{compatibility_minimum}": COMPATIBILITY_MINIMUM
    },
)

Default(manifest)


# *** Create symbolic link from project addons dir to gdUnit4 testing framework submodule.

def symlink(target, source, env):
    # Note: parameter `target` is a list of build targets.
    assert len(target) == 1
    assert len(source) == 1
    dst = str(target[0])
    src = str(source[0])
    if platform == "windows":
        # Create NTFS junction.
        # Note: Windows requires elevated privileges to create symlinks, so we're creating NTFS junction instead.
        try:
            import _winapi
            _winapi.CreateJunction(src, dst)
        except Exception as e:
            # Don't fail the build if this step fails.
            print("WARNING: Failed to create NTFS junction for gdUnit4: ", str(e))
    else:
        # Create symlink.
        src = os.path.relpath(src, os.path.dirname(dst))
        os.symlink(src, dst)
    return 0


gdunit_symlink = env.Command(
    "project/addons/gdUnit4",
    "modules/gdUnit4/addons/gdUnit4",
    [
        symlink,
    ],
)

Default(gdunit_symlink)

<?xml version="1.0" encoding="UTF-8" ?>
<class name="SentrySDK" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Entry point to Sentry SDK for Godot Engine.
	</brief_description>
	<description>
		Provides a set of functions to log errors and events to Sentry and enrich them with tags, breadcrumbs and arbitrary context.
		Sentry SDK hooks into Godot's logging and automatically reports errors. An [b]event[/b] is one instance of sending data to Sentry. Generally, this data is an error or exception.
		While capturing an event, you can also record the [b]breadcrumbs[/b] that lead up to that event. Breadcrumbs are different from events: they will not create an event in Sentry, but will be buffered until the next event is sent. Breadcrumbs can be captured with [method SentrySDK.add_breadcrumb] method. Learn more about [url=https://docs.sentry.io/platforms/godot/enriching-events/breadcrumbs/]Breadcrumbs in the Sentry SDK documentation[/url].
		Another common operation is to capture a bare message. A [b]message[/b] is textual information that should be sent to Sentry. Typically, our SDKs don't automatically capture messages, but you can capture them manually. Messages show up as issues on your issue stream, with the message as the issue name. To simplify creating events, there are shorthand functions that construct and capture prepopulated event objects. The most important one is [method SentrySDK.capture_message].
		To learn more, visit [url=https://docs.sentry.io/platforms/godot/]Sentry SDK documentation[/url].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_attachment">
			<return type="void" />
			<param index="0" name="attachment" type="SentryAttachment" />
			<description>
				Attaches a file to future Sentry events. The [param attachment] should be a [SentryAttachment] object created with [method SentryAttachment.create_with_path] or [method SentryAttachment.create_with_bytes]. Supports Godot's virtual file system paths like "user://".
				To learn more, visit [url=https://docs.sentry.io/platforms/godot/enriching-events/attachments/]Attachments documentation[/url].
			</description>
		</method>
		<method name="add_breadcrumb">
			<return type="void" />
			<param index="0" name="breadcrumb" type="SentryBreadcrumb" />
			<description>
				Adds a breadcrumb to the future events. You can create a [SentryBreadcrumb] object using the static [method SentryBreadcrumb.create] method with an optional message parameter.
				Sentry uses breadcrumbs to create a trail of events that happened prior to an issue. For more information, see [SentryBreadcrumb] class.
			</description>
		</method>
		<method name="capture_event">
			<return type="String" />
			<param index="0" name="event" type="SentryEvent" />
			<description>
				Captures [param event] and sends it to Sentry, returning the event ID. You can create an event with [method SentrySDK.create_event].
			</description>
		</method>
		<method name="capture_feedback">
			<return type="void" />
			<param index="0" name="feedback" type="SentryFeedback" />
			<description>
				Captures user [param feedback] and sends it to Sentry. The feedback can optionally be associated with a specific error event if the [member SentryFeedback.associated_event_id] is set.
				For more information, see the [SentryFeedback] class and visit the [url=https://docs.sentry.io/platforms/godot/user-feedback/]User Feedback documentation[/url].
			</description>
		</method>
		<method name="capture_message">
			<return type="String" />
			<param index="0" name="message" type="String" />
			<param index="1" name="level" type="int" enum="SentrySDK.Level" default="1" />
			<description>
				Captures an event with [param message] and sends it to Sentry, returning the event ID.
			</description>
		</method>
		<method name="close">
			<return type="void" />
			<description>
				Closes the SDK and flushes any pending events to ensure all queued data is sent to Sentry before shutdown. Called automatically when the application exits.
			</description>
		</method>
		<method name="create_event" qualifiers="const">
			<return type="SentryEvent" />
			<description>
				Creates a new [SentryEvent] object. You can capture the event with [method SentrySDK.capture_event].
			</description>
		</method>
		<method name="get_last_event_id" qualifiers="const">
			<return type="String" />
			<description>
				Returns the ID of the last captured event.
			</description>
		</method>
		<method name="init">
			<return type="void" />
			<param index="0" name="configuration_callback" type="Callable" default="Callable()" />
			<description>
				Initializes the SDK. Called automatically during startup if "Auto Init" is enabled in the project settings.
				Manual initialization is only needed when you want to control the exact timing of SDK startup, or when you need to initialize options from code, or use callbacks such as [member SentryOptions.before_send]. Make sure to disable "Auto Init" in the project settings if you intend to manually initialize the SDK.
				[b]Note[/b]: The earliest place to initialize Sentry from script is in the [method MainLoop._initialize].
				You can customize the SDK's options by passing a [param configuration_callback] function. Here's a complete example:
				[codeblock]
				class_name ProjectMainLoop
				extends SceneTree
				# Tip: Assign ProjectMainLoop as your main loop type in the project settings
				# under `application/run/main_loop_type`.

				func _initialize() -&gt; void:
					SentrySDK.init(func(options: SentryOptions) -&gt; void:
						options.debug = true
						options.release = "my-game@1.2.3"
						options.environment = "production"
						options.before_send = _on_before_send_to_sentry
					)

				func _on_before_send_to_sentry(event: SentryEvent) -&gt; SentryEvent:
					# Process event and return either the same event object,
					# with or withour modifications, or null to skip reporting the event.
					return event
				[/codeblock]
			</description>
		</method>
		<method name="is_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether the SDK is enabled, i.e. whether it is initialized and active.
			</description>
		</method>
		<method name="remove_tag">
			<return type="void" />
			<param index="0" name="key" type="String" />
			<description>
				Removes the tag with the given [param key].
			</description>
		</method>
		<method name="remove_user">
			<return type="void" />
			<description>
				Removes the user data previously set with [method SentrySDK.set_user].
			</description>
		</method>
		<method name="set_context">
			<return type="void" />
			<param index="0" name="key" type="String" />
			<param index="1" name="value" type="Dictionary" />
			<description>
				Adds a custom context with the specified [param key] and [param value]. The [param value] should be a dictionary with string keys and can have multiple levels of nesting.
				To learn more, visit [url=https://docs.sentry.io/platforms/godot/enriching-events/context/]Context documentation[/url].
			</description>
		</method>
		<method name="set_tag">
			<return type="void" />
			<param index="0" name="key" type="String" />
			<param index="1" name="value" type="String" />
			<description>
				Assigns a tag with the specified [param key] and [param value].
				To learn more, visit [url=https://docs.sentry.io/platforms/godot/enriching-events/tags/]Tags documentation[/url].
			</description>
		</method>
		<method name="set_user">
			<return type="void" />
			<param index="0" name="user" type="SentryUser" />
			<description>
				Assigns user data. See [SentryUser].
			</description>
		</method>
	</methods>
	<constants>
		<constant name="LEVEL_DEBUG" value="0" enum="Level">
		</constant>
		<constant name="LEVEL_INFO" value="1" enum="Level">
		</constant>
		<constant name="LEVEL_WARNING" value="2" enum="Level">
		</constant>
		<constant name="LEVEL_ERROR" value="3" enum="Level">
		</constant>
		<constant name="LEVEL_FATAL" value="4" enum="Level">
			This is the highest level and is used for events that led to the application crashing.
		</constant>
	</constants>
</class>
